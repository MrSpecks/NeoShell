import aiohttp
import asyncio
import json
import os
from datetime import datetime
from tqdm.asyncio import tqdm_asyncio

from core.utils import detect_tech_stack

async def fetch(session, url):
    try:
        async with session.get(url, timeout=10) as response:
            html = await response.text()
            headers = response.headers
            return {
                "url": url,
                "status": response.status,
                "html": html,
                "headers": headers
            }
    except Exception as e:
        return {
            "url": url,
            "status": "error",
            "error": str(e),
            "html": "",
            "headers": {}
        }

async def run_recon(targets):
    os.makedirs("results", exist_ok=True)
    output_path = f"results/recon_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

    results = []

    async with aiohttp.ClientSession() as session:
        responses = await tqdm_asyncio.gather(*[fetch(session, url) for url in targets])

        for resp in responses:
            if resp["status"] == "error":
                results.append({
                    "url": resp["url"],
                    "status": resp["status"],
                    "error": resp["error"]
                })
                continue

            stack = detect_tech_stack(resp["html"], headers=resp["headers"])

            results.append({
                "url": resp["url"],
                "status": resp["status"],
                "tech_stack": stack,
                # Optional: include a small snippet preview
                # "snippet": resp["html"][:200]
            })

    with open(output_path, "w") as f:
        json.dump(results, f, indent=2)

    # Auto-open the output file
    import webbrowser
    abs_path = os.path.abspath(output_path)
    webbrowser.open(f"file://{abs_path}")
