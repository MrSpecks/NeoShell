import asyncio
import aiohttp
from tqdm import tqdm
from core.stack_fingerprint import detect_stack

HEADERS = {
    "User-Agent": "NeoShellScanner/1.0"
}

async def fetch(session, url):
    try:
        async with session.get(url, headers=HEADERS, timeout=10) as response:
            content = await response.text()
            return {
                "url": url,
                "status": response.status,
                "headers": dict(response.headers),
                "body": content
            }
    except Exception as e:
        return {"url": url, "error": str(e)}

async def run_recon(targets):
    import os
    os.makedirs("results", exist_ok=True)
    results = []
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, target) for target in targets]
        for future in tqdm(asyncio.as_completed(tasks), total=len(tasks), desc="Scanning"):
            result = await future
            if "body" in result:
                result["detected_stack"] = detect_stack(result["headers"], result["body"])
            results.append(result)

    # Save to file
    from datetime import datetime
    import json
    output_path = f"results/recon_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(output_path, "w") as f:
        json.dump(results, f, indent=2)
    print(f"\nRecon complete. Results saved to {output_path}")
    import webbrowser
    import os

    # Open the output file automatically
    abs_path = os.path.abspath(output_path)
    webbrowser.open(f"file://{abs_path}")